Lets Build MailVoyage Project, This is our brand and project name. We are designing a modern and secure Email Client. and the project structure is will be friendly to open source that can be addressed and contribute by anyone. we use typescript, tailwindcss latest and react vite for entire project with api folder for storing the backend server code in the root folder as it can be previewed or deploed in vercel too for vercel friendly deployment also and our client will be having authentication and also application that should be flexible and viewport to all device types should scale up the sizes for all device fits content as responsive web and also should have all types of useful meta tags for our application. we use framer motions and animations of different ackages for fluid and attractive smooth experience and we keep a root level theme for system, light, and dark modes of our applications and also tailwind-animate and we design in components based structure for frontend and model based in backend. our email client will have login and register pages routes accessed only without login of a user. and when is logged in or already loggedin then go to main project email app. we have dashboard as point where user needs to direct after login. if user opens direct route url like domain.com/settings as settings page route it should check for user is loggedin or not if not logged in go to login and use parameters from where it is came and also from where it should go after login as if user loggedin then go to settings page as he was redirect from earlier and also our application is should be so protective with high secure middlewares and authentications with all modern approaches it is needed. enhance this prompt with better wa as possible as it should be able to work in modern conditions and low latency work mode as we need to deliver our application smooth and faster and modern designed way. and initially we go with login and register part with a welcom dashboard page slowly we update entire application. and when user is authenticated like logged in from server backend he will get bearer-token and user details like username, email and we store them in localstorage as it will be used in authentication purpose. we use autoprefix and postcss in our application and also postcss should blend and work with tailwindcss configurations and root style definations for entire theme template for our application. configuration in mjs ts would be better or anything that works for tailwindcss version 4. even in our vite configuration we import tailwindcss package as directed in the documentations. we will have root folder package.json which has some scripts that can able to run both backend code which is in api folder and frontend code in respective folder and also use concurrently for running both of them and in frontend we use api as server proxy to run backend code in vite config keep open false in server as we don't open the browser each time when server is started. we have react tostify for toast notifcation and we create a special toastify file for it which configure the toast settings and we use that file in entire application to showing the toast. and setup the routes properly when user is logged in it should go to dashboard and also the routes in the app or main file which we create will also check for already login state as checking user authentication management like token and username and email which gets when user loggedin if that is present in localstorage then test the token is expired or not if token is expired then show toast like you have been logged out and redirect to login page. for our middleware in frontend each api request it contains the header as :authority: which help in blocking from different host and tools so we check localhost:3000 or localhost and MailVoyage.in and a .env file in api/ folder for backend have a object called host_address: where user can change the domain name where it is sending for self hosting purpose and other host will be blocked without responding even if no header is also blocked with this way we can give a secure layer and also when user is logged in the api request it sents each request with headers like :authority: , :method: , and token should be send apart from these anything any new data or form with additional headers can be added at application pages itself but these should be default. generate appropriate and best structure and code.